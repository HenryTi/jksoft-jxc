ACT BookSheet (
    id ID,
) {
    /*
    VAR stateId ID = (SELECT a.ix FROM IxMyDraft as a WHERE a.xi=id);
    VAR meInUnit ID;
    -- PROC BaseMeInUnit(meInUnit);
    IF not exists(SELECT a.id FROM Bind as a WHERE a.id=stateId AND a.base=meInUnit) {
        RETURN;
    }
    WITH IxMyDraft XI=id DEL;

    -- VAR base ID = (SELECT a.base FROM Sheet as a WHERE a.id=id);
    -- VAR sheetName CHAR(50) = (SELECT b.name FROM Bind as a JOIN Prop as b on a.item=b.id);
    -- PROC BaseSheetState(sheetName, FlowState.ready, stateId);
    WITH IxMyDraft IX=stateId XI=id;
    */
};

ACT BookSheetStoreIn ver 0.2 (
    id ID,
) {
    PROC BookSheetDerive(id, 1, 1, 1);
};

ACT BookSheetStoreOut ver 0.2 (
    id ID,
) {
    PROC BookSheetDerive(id, -1, 1, 2);
};

PROC BookSheetDerive ver 0.8 (
    id ID,
    neg TINYINT,        -- 1 or -1
    sheetType INT,
    queueType INT,
) {
    /*
    IF not exists(SELECT a.xi FROM IxMySheet as a WHERE a.ix=$user AND a.xi=id and entityid(id)=sheetType) {
        RETURN;
    }
    */
    TABLE originSheets(KEY id ID);
    -- WITH IxMySheet IX=$user XI=id DEL;
    -- 下面记账
    FOR (VAR id ID, value VALUE, origin ID, originSheet ID, item ID, value QUANTITY, price PRICE, amount AMOUNT
        OF SELECT a.id, a.value, a.item as origin, b.base as originSheet, b.item, b.value, b.v1 as price, b.v2 as amount
            FROM Detail as a JOIN Detail as b ON b.id=a.item
            WHERE a.base=id
            ORDER BY a.id ASC
    ) {
        VAR delta VALUE = neg * value;
        INTO originSheets IGNORE SELECT originSheet as id;
        WITH Done as a ID=origin SET a.value += value;
        WITH Balance ID=item SET value+=delta;
        VAR subject ID = ID(Subject new KEY type=SubjectType.Storage, item=item);
        VAR history ID;
        WITH History as a ID to history SET a.subject=subject, a.value=delta, a.ref=id;
    }
    FOR (VAR origin ID OF SELECT a.id as origin FROM originSheets as a) {
        IF (SELECT sum(b.value-c.value)
                FROM Detail as b
                    JOIN Done as c on c.id=b.id 
                WHERE b.base=origin
           )=0
        {
            QUEUE (queueType) Del origin;
        }
    }
};

/*
ACT BookSheetStoreOut ver 0.2 (
    id ID,
) {
    IF not exists(SELECT a.xi FROM IxMySheet as a WHERE a.ix=$user AND a.xi=id and entityid(id)=typeof SheetStoreOut) {
        RETURN;
    }
    TABLE originSheets(KEY id ID);
    WITH IxMySheet IX=$user XI=id DEL;
    -- 下面记账
    FOR (VAR id ID, value VALUE, origin ID, originSheet ID, item ID, quantity QUANTITY, price PRICE, amount AMOUNT
        OF SELECT a.id, a.value as value, a.origin, b.sheet as originSheet, b.item, b.quantity, b.price, b.amount
            FROM DetailOrigin as a JOIN DetailQPA as b ON b.id=a.origin
            WHERE a.sheet=id
            ORDER BY a.id ASC
    ) {
        LOG concat_ws(',', 'sheet=', id, 'originSheet=', originSheet, 'value=', value) subject 'book done';
        INTO originSheets IGNORE SELECT originSheet as id;
        WITH Done ID=origin SET done+=value;
        WITH Book ID=item SET value-=value;
        VAR project ID = ID(Project new KEY type=ProjectType.Storage, item=item);
        VAR history ID;
        WITH History as a ID to history SET a.project=project, a.value=-value, a.ref=id;
    }
    FOR (VAR origin ID OF SELECT a.id as origin FROM originSheets as a) {
        VAR unfinish VALUE;
        SET unfinish = (SELECT sum(b.quantity-c.done)
            FROM DetailQPA as b
                JOIN Done as c on c.id=b.id 
            WHERE b.sheet=origin
        );
        LOG concat_ws(',', 'unfinish=', unfinish, 'origin=', origin) subject 'remove from pending';
        IF unfinish=0
        {
            QUEUE QueueStoreOut Del origin;
        }
    }
};
*/
