Biz ACT SaveAtom ver 0.2 (
    atom CHAR(100),
    base BIGINT,                -- always null, to align with $site.SaveAtom
    no NO,
    ex CHAR(200),
)
RETURNS ret (
    id ID,
) {
    SET base = PhraseId(atom);

    -- 判断是不是已经有同编号的输入了。比如，我正在输入的时候，别人也输入了。
    VAR id ID = 0;
    SET id=(SELECT a.id FROM Atom as a WHERE a.base=base and a.no=no);
    -- SET id = ID(Atom KEY base=base, no=no);
    IF id IS NULL {
        SET id = ID(Atom new KEY base=base);
    }
    WITH Atom as a ID=id SET a.no=no, a.ex=ex;
    -- WITH IxAtom i=base x=id;
    INTO ret SELECT id;
}

Biz ACT SaveAtomEx (
    atom PHRASE,
    base ID,            -- if null, then $site
    keys TEXT,          -- starts with [, then [k0, k1, ...], else string
    ex EX,
)
RETURNS ret (
    id ID,
) {
    VAR id ID;

    INTO ret SELECT id;
}

Biz ACT SaveBudValue ver 0.2 (
    phrase CHAR(200),
    id ID,
    int BIGINT,
    dec VALUE,
    str CHAR(100),
) {
    VAR phraseId ID = PhraseId(phrase);
    IF phraseId IS NOT NULL {
        IF id IS NULL {
            SET id=$site;
        }
        IF int IS NOT NULL {
            WITH IxBudInt as a I=id X=phraseId SET a.value=int;
            IF EXISTS(SELECT a.id FROM BizBud as a WHERE (a.flag & 1)=1) {
                VAR budId ID = ID(Bud New Key base=phraseId, ext=int);
                WITH IxBud I=budId X=id;
            }
            WITH IxBudDec I=id X=phraseId DEL;
            WITH IxBudStr I=id X=phraseId DEL;
        }
        IF dec IS NOT NULL {
            WITH IxBudDec as a I=id X=phraseId SET a.value=dec;
            WITH IxBudInt I=id X=phraseId DEL;
            WITH IxBudStr I=id X=phraseId DEL;
        }
        IF str IS NOT NULL {
            WITH IxBudStr as a I=id X=phraseId SET a.value=str;
            WITH IxBudInt I=id X=phraseId DEL;
            WITH IxBudDec I=id X=phraseId DEL;
        }
        FOR (VAR budId ID OF 
                SELECT a.id as budId 
                    FROM Bud as a
                        JOIN BizPhrase as b ON b.id=a.ext
                    WHERE a.base=phraseId AND b.type=BizPhraseType.optionsitem
            )
        {
            WITH IxBud I=id X=budId DEL;
        }
    }
};

Biz ACT SaveBudCheck (
    budPhrase CHAR(200),
    id ID,
    optionsItemPhrase CHAR(200),
    checked TINYINT,            -- 0: remove, 1: add
) {
    VAR budPhraseId ID = PhraseId(budPhrase);
    VAR optionsItemId ID = PhraseId(optionsItemPhrase);
    VAR budId ID = ID(Bud new KEY base=budPhraseId, ext=optionsItemId);
    IF checked=0 {
        WITH IxBud I=id X=budId DEL;
    }
    ELSE {
        WITH IxBud I=id X=budId;
    }
    WITH IxBudInt I=id X=budPhraseId DEL;
    WITH IxBudDec I=id X=budPhraseId DEL;
    WITH IxBudStr I=id X=budPhraseId DEL;
};

Biz ACT SaveBudRadio (
    budPhrase CHAR(200),
    id ID,
    optionsItemPhrase CHAR(200),
) {
    -- 自动清除原来的，添加现在的
    VAR budPhraseId ID = PhraseId(budPhrase);
    VAR optionsItemId ID = PhraseId(optionsItemPhrase);
    FOR (VAR x ID OF SELECT a.x
        FROM IxBud as a 
            JOIN Bud as b ON b.id=a.x 
        WHERE a.i=id AND b.base=budPhraseId)
    {
        WITH IxBud I=id X=x DEL;
    }
    VAR budId ID = ID(Bud new KEY base=budPhraseId,ext=optionsItemId);
    WITH IxBud I=id X=budId;
};

Biz Act DelAtom (
    id ID,
) {
    VAR base ID = a.base FROM Atom as a WHERE a.id=id;
    -- WITH IxAtom i=base x=id DEL;
}

Biz Act SaveSpec ver 0.1 (
    spec CHAR(100),
    atom ID,
    values CHAR(300),
)
RETURNS ret (
    id ID,
) {
    VAR id ID;
    SET id = specid(spec, atom, values);
    INTO ret SELECT id;
    VAR a CHAR(300) = specvalue(id);
}

Biz ACT SaveSheet (
    sheet CHAR(100),
    no NO,
    target ID,
    -- operator ID,            -- employee Item
    value VALUE,
)
RETURNS ret (
    id ID,
) {
    VAR base ID = SiteBudId(sheet);
    VAR me ID = Me();

    VAR sheetId ID;
    WITH Sheet as a ID to sheetId Key(base, no) 
        SET a.target=target, a.operator=me, a.value=value;

    WITH IxMy I=me X=sheetId;

    INTO ret SELECT sheetId as id;
};

Biz ACT SaveDetail (
    base ID,
    id ID,
    item ID,                -- 计量对象。比如：商品不同包装或者批次
    target ID,              -- 操作对象。比如：客户，仓库，等
    origin ID,
    value VALUE,
    price VALUE,
    amount VALUE,
    pendFrom ID,
    arr props (
        prop PHRASE,
        propValue VALUE,
    ),
) 
RETURNS ret (
    id ID,
) {
    VAR me ID = Me();
    IF base IS NULL OR NOT EXISTS(SELECT x FROM IxMy WHERE i=me AND x=base) {
        -- 如果base sheet没有在我的draft里面，不能写入明细。这是安全保证
        RETURN;
    }
    IF id IS NULL {
        SET id = ID(Detail New);
        WITH Detail ID=id SET base=base, item=item, target=target, origin=origin, value=value, price=price, amount=amount;
    }
    ELSE {
        WITH Detail ID=id SET item=item, target=target, origin=origin, value=value, price=price, amount=amount;
    }
    IF pendFrom IS NOT NULL {
        WITH DetailPend as a ID=id SET a.pendFrom=pendFrom;
    }
    INTO ret SELECT id;
};

Biz ACT RemoveDraft (
    id ID,
) {
    VAR me ID = Me();
    WITH IxMy I=me X=id DEL;
};

Biz QUERY GetMyDrafts ver 0.1 (
)
PAGE (
    * Sheet DESC,
    phrase CHAR(200),
) {
    VAR me ID = Me();
    -- 获取我正在录入的单据
    PAGE SELECT * b, BudPhrase(b.base) as phrase
        FROM IxMy as a
            JOIN Sheet as b ON a.x=b.id
        WHERE b.id<$pageStart AND a.i=me
        ORDER BY b.id DESC
        LIMIT $pageSize;
};

Biz Query SearchAtom (
    atom Phrase,
    key CHAR(50),
)
PAGE (
    id ID desc,
    no CHAR(50),
    ex CHAR(50),
    phrase PHRASE,
) {
    VAR base ID = PhraseId(atom);

    PAGE SELECT a.id, a.no, a.ex, d.name as phrase
        FROM 
            -- IxAtom as x JOIN 
            Atom as a 
                -- ON x.i=a.base AND a.id=x.x
            -- JOIN Bud as b ON b.id=a.base
            JOIN BizPhrase as d ON d.id=a.base
            
        WHERE a.base=base AND a.id<$pageStart AND SEARCH(a.no, a.ex LIKE key)
        ORDER BY a.id desc
        LIMIT $pageSize;
};

Biz Query SearchAtomBuds ver 0.2 (
    phrase Phrase,
    key CHAR(50),
    budNames CHAR(300),
)
PAGE (
    id ID desc,
    no CHAR(50),
    ex CHAR(50),
    phrase Phrase,
)
RETURNS meds (
    id ID,
    main ID,
    detail ID,
)
RETURNS budsInt (
    id ID,
    bud ID,
    phrase CHAR(50),
    value INT,
)
RETURNS budsDec (
    id ID,
    bud ID,
    phrase CHAR(50),
    value VALUE,
)
RETURNS budsStr (
    id ID,
    bud ID,
    phrase CHAR(50),
    value CHAR(200),
) {
    PAGE WITH RECURSIVE pPhrase AS (
        SELECT r.x as id, r.i as base
        FROM IxBizPhrase as r
            JOIN BizPhrase as p ON p.id=r.x
            JOIN XBiz as p1 ON p1.id=p.id
        WHERE p.name=phrase -- AND p.valid=1
        UNION
        SELECT a.x as id, a.i as base
        FROM IxBizPhrase as a JOIN pPhrase AS b
            ON b.id=a.i
    )
    SELECT a.id, a.no, a.ex, d.name as phrase
        FROM Atom as a 
            JOIN pPhrase as c ON c.id=a.base
            JOIN BizPhrase as d ON d.id=a.base
        WHERE a.id<$pageStart AND SEARCH(a.no, a.ex LIKE key) 
            AND d.base=$site
        ORDER BY a.id desc
        LIMIT $pageSize;

    INTO meds SELECT b.id, b.id as main, b.id as detail
        FROM $page as b;

    INTO budsInt SELECT a.id, d.id as bud
        , d.name as phrase
        , b.value
        FROM $page as a 
            JOIN IxBudInt as b ON b.i=a.id
            JOIN BizPhrase as d ON d.id=b.x -- phrase
        WHERE LOCATE(d.name, budNames)>0;

    INTO budsDec SELECT a.id, d.id as bud
        , d.name as phrase
        , b.value
        FROM $page as a 
            JOIN IxBudDec as b ON b.i=a.id
            JOIN BizPhrase as d ON d.id=b.x -- phrase
        WHERE LOCATE(d.name, budNames)>0;

    INTO budsStr SELECT a.id, d.id as bud
        , d.name as phrase
        , b.value
        FROM $page as a 
            JOIN IxBudStr as b ON b.i=a.id
            JOIN BizPhrase as d ON d.id=b.x -- phrase
        WHERE LOCATE(d.name, budNames)>0;
};

Biz Query SearchAtomUomBuds ver 0.2 (
    phrase Phrase,
    key CHAR(50),
    budNames CHAR(300),
)
PAGE (
    id ID desc,
    no CHAR(50),
    ex CHAR(50),
    phrase Phrase,
)
RETURNS uoms (
    id ID,
    atom ID,
    uom ID,
)
RETURNS budsInt (
    id ID,
    bud ID,
    phrase CHAR(50),
    value INT,
)
RETURNS budsDec (
    id ID,
    bud ID,
    phrase CHAR(50),
    value VALUE,
)
RETURNS budsStr (
    id ID,
    bud ID,
    phrase CHAR(50),
    value CHAR(200),
) {
    PAGE WITH RECURSIVE pPhrase AS (
        SELECT r.x as id, r.i as base
        FROM IxBizPhrase as r
            JOIN BizPhrase as p ON p.id=r.x
            JOIN XBiz as p1 ON p1.id=p.id
        WHERE p.name=phrase -- AND p.valid=1
        UNION
        SELECT a.x as id, a.i as base
        FROM IxBizPhrase as a JOIN pPhrase AS b
            ON b.id=a.i
    )
    SELECT a.id, a.no, a.ex, d.name as phrase
        FROM Atom as a 
            JOIN Bud as b ON b.id=a.base
            JOIN pPhrase as c ON c.id=b.ext
            JOIN BizPhrase as d ON d.id=b.ext
        WHERE a.id<$pageStart AND SEARCH(a.no, a.ex LIKE key)
            AND b.base=$site
        ORDER BY a.id desc
        LIMIT $pageSize;

    INTO uoms SELECT b.id, b.atom, b.uom
        FROM $page as a 
            JOIN AtomUom as b ON b.atom=a.id;

    INTO budsInt SELECT a.id, d.id as bud
        , d.name as phrase
        , b.value
        FROM uoms as a 
            JOIN IxBudInt as b ON b.i=a.id
            JOIN BizPhrase as d ON d.id=b.x -- c.phrase
        WHERE LOCATE(d.name, budNames)>0;
    INTO budsDec SELECT a.id, d.id as bud
        , d.name as phrase
        , b.value
        FROM uoms as a 
            JOIN IxBudDec as b ON b.i=a.id
            JOIN BizPhrase as d ON d.id=b.x -- c.phrase
        WHERE LOCATE(d.name, budNames)>0;
    INTO budsStr SELECT a.id, d.id as bud
        , d.name as phrase
        , b.value
        FROM uoms as a 
            JOIN IxBudStr as b ON b.i=a.id
            JOIN BizPhrase as d ON d.id=b.x -- c.phrase
        WHERE LOCATE(d.name, budNames)>0;
};

Biz Query GetSheet (
    id ID,
    budNames CHAR(200),  -- \t separated phrases of the assigns
)
RETURNS main (
    * SHEET,
)
RETURNS details (
    * Detail,
    -- done VALUE,
    pendFrom ID,
    pendValue VALUE,
    sheet PHRASE,
    no NO,
)
RETURNS origins (
    * Detail,
    -- done VALUE,
)
RETURNS buds (
    id ID,              -- detail id
    bud ID,
    phrase Phrase,
    value VALUE,
) {
    INTO main SELECT * a
        FROM Sheet as a
            JOIN BizPhrase as b ON b.id=a.base
        WHERE a.id=id AND b.base=$site;
    INTO details SELECT * a
        , c.pendFrom, d.value as pendValue
        , BudPhrase(e.base) as sheet, e.no
        FROM Detail as a
            LEFT JOIN DetailPend as c ON c.id=a.id
            LEFT JOIN Pend as d ON d.id=c.pendFrom
            LEFT JOIN Sheet as e ON e.id=a.base
        WHERE a.base=id;
    INTO origins SELECT DISTINCT * b -- , IFNULL(c.value, 0) as done
        FROM (SELECT DISTINCT origin FROM details) as a
            JOIN DETAIL as b ON b.id=a.origin
    ;
    INTO buds SELECT a.id, b.x as bud, d.name as phrase, b.value
        FROM Detail as a
            JOIN IxBudDec as b ON b.i=a.id
            JOIN BizPhrase as d ON d.id=b.x -- c.phrase
        WHERE a.base=id 
            AND (budNames IS NULL OR LOCATE(d.name, budNames)>0);
};

Biz Query GetAtom (
    id ID,
)
RETURNS main (
    id ID,
    phrase Phrase,
    no CHAR(50),
    ex CHAR(50),
)
RETURNS budsInt (
    bud ID,
    phrase Phrase,
    value BIGINT,
)
RETURNS budsDec (
    bud ID,
    phrase Phrase,
    value VALUE,
)
RETURNS budsStr (
    bud ID,
    phrase Phrase,
    value CHAR(200),
)
RETURNS budsCheck (
    bud ID,
    phrase Phrase,
    item Phrase,
)
RETURNS uoms (
    atomUom ID,             -- AtomUom
    uom ID,                 -- uomI or uomX Atom
    -- no NO,                  -- of no
    ex EX,                  -- of uom
    -- prev ID,                -- for declare the ratio
    prevEx EX,
    ratio VALUE,            -- : ex = ratio prevEx
) {
    INTO main SELECT a.id, c.name as phrase, a.no, a.ex
        FROM Atom as a
            JOIN BizPhrase as c ON c.id=a.base
        WHERE a.id=id AND c.base=$site;

    INTO budsInt SELECT a.x as bud
        , e.name as phrase
        , a.value
        FROM IxBudInt as a
            -- JOIN Atom as b ON b.id=a.i
            -- JOIN BizPhrase as c on c.id=b.base
            JOIN BizPhrase as e ON e.id=a.x
        WHERE a.i=id and e.type=BizPhraseType.prop
            -- AND c.base=$site
            ;
    INTO budsInt SELECT a.x as bud
        , e.name as phrase
        , a.value
        FROM IxBudInt as a
            -- JOIN Atom as b ON b.id=a.i
            -- JOIN BizPhrase as c on c.id=b.base
            JOIN BizPhrase as e ON e.id=a.x
        WHERE a.i=id AND e.name = '$.uom'
            -- AND c.base=$site
            ;
    INTO budsDec SELECT a.x as bud
        , e.name as phrase
        , a.value
        FROM IxBudDec as a
            -- JOIN Atom as b ON b.id=a.i
            -- JOIN BizPhrase as c on c.id=b.base
            JOIN BizPhrase as e ON e.id=a.x
        WHERE a.i=id and e.type=BizPhraseType.prop
            -- AND c.base=$site
            ;
    INTO budsStr SELECT a.x as bud
        , e.name as phrase
        , a.value
        FROM IxBudStr as a
            -- JOIN Atom as b ON b.id=a.i
            -- JOIN BizPhrase as c on c.id=b.base
            JOIN BizPhrase as e ON e.id=a.x
        WHERE a.i=id and e.type=BizPhraseType.prop
            -- AND c.base=$site
            ;
    INTO budsCheck SELECT c.id as bud, c.name as phrase, d.name as item
        FROM IxBud as a
            JOIN Bud as b ON b.id=a.x
            JOIN BizPhrase as c ON c.id=b.base
            JOIN BizPhrase as d ON d.id=b.ext
            -- JOIN Atom as e ON e.id=a.i
            -- JOIN BizPhrase as f ON f.id=e.base
        WHERE a.i=id AND c.type=BizPhraseType.prop; -- AND f.base=$site;

    INTO uoms SELECT b.id as atomUom,             -- AtomUom
                b.uom,                    -- uomI or uomX Atom
                c.ex,                   -- of uom
                null as prevEx,
                null as ratio            -- : ex = ratio prevEx
        FROM IxAtom as a
            JOIN AtomUom as b ON b.id=a.x
            JOIN Atom as c ON c.id=b.uom
            -- LEFT JOIN IxUom as d ON d.i=b.uom
        WHERE a.i=id;
};
